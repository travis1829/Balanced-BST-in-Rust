//assumes node is non-null
    unsafe fn _rebuild(&self, node: &mut *mut Node<K, V>) {
        thread::scope(|s| {
            let mut vector : Vec<*mut Node<K, V>> = Vec::with_capacity((**node).size);
            vector.set_len((**node).size);
            let mut array = vector.into_boxed_slice();
            //self._into_array(*node, &mut array[..]);
            //*node = self._into_tree(&array[..]);
        }).unwrap();
    }

    //assumes node is non-null
    unsafe fn _into_array<'a>(&'a self, s: &'a crossbeam::thread::Scope<'a>, node: Cursor<K, V>, array: &'a mut [Cursor<K, V>]) {
        let mut index = 0;
        let handler = 
        if (*node.ptr).left != ptr::null_mut() {
            index = (*(*node.ptr).left).size;
            let cursor = Cursor::new((*node.ptr).left);
            Some(s.spawn(|_| {
                self._into_array(s, cursor, &mut array[..index]);
            }))
        }
        else {None};
        if (*node.ptr).right != ptr::null_mut() {
            let cursor = Cursor::new((*node.ptr).right);
            self._into_array(s, cursor, &mut array[index+1..]);
        }
        
        if let Some(handle) = handler {
            handle.fj
        }
        array[index] = node;
    }